on:
  push:
    branches:
      - master
      - release

env:  
  DOTNET_VERSION: "6.0.101"  
  OUTPUT_PATH: "output"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2          
      
    - name: Setup .NET Core ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Run unittests
      run: |        
        pushd ./src
        dotnet test --configuration Release
        popd 

    - name: Publish Azure Function project
      run: |        
        pushd ./src
        dotnet publish --configuration Release --output ${{ env.OUTPUT_PATH }}
        popd 

    - name: Create zip
      run: cd src/output;mkdir zip; zip -r ./zip/function.zip .
    
    - name: Copy Azure Function Package to artifacts
      uses: actions/upload-artifact@v1
      with:
        name: functions
        path: ./src/${{ env.OUTPUT_PATH }}/zip
    
    - name: Copy infra to artifacts
      uses: actions/upload-artifact@v1
      with:
        name: infra
        path: ./infra

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get token for Docker
      id: get-token
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |          
          echo "::set-output name=TOKEN::$(az acr login -n aksupdates --expose-token --query accessToken -o tsv)"

    - name: Login, Build Docker Image and Push      
      run : |
        echo ${{ steps.get-token.outputs.TOKEN }} | docker login --username 00000000-0000-0000-0000-000000000000 --password-stdin aksupdates.azurecr.io        
        docker build -f ./src/AksUpdates.WebUI/Dockerfile -t aksupdates.azurecr.io/aksupdates.webui:${{ github.sha }} ./src
        docker push aksupdates.azurecr.io/aksupdates.webui:${{ github.sha }}
        
  deploy:
    name: Release to Azure
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download Azure Function Package artifacts
        uses: actions/download-artifact@v1
        with:
          name: functions
          path: ${{ env.OUTPUT_PATH }}

      - name: Download infra artifacts
        uses: actions/download-artifact@v1
        with:
          name: infra
          path: ./infra

      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set env to production
        if: endsWith(github.ref, '/release')
        run: |
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV

      - name: Set env to development
        if: endsWith(github.ref, '/master')
        run: |
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV

      - uses: azure/arm-deploy@v1
        with:
          scope: subscription
          subscriptionId: ${{ secrets.subscriptionId }}  
          region: westeurope        
          template: ./infra/bicep/common.bicep
          failOnStdErr: false
          parameters: ./infra/bicep/common.parameters.json

      - uses: azure/arm-deploy@v1
        with:
          scope: subscription
          subscriptionId: ${{ secrets.subscriptionId }}  
          region: westeurope                  
          template: ./infra/bicep/main.bicep
          failOnStdErr: false
          parameters: 
            ./infra/bicep/main.parameters.${{ env.ENVIRONMENT }}.json 
            containerImageTag=${{ github.sha }}
            tenantId=${{ secrets.tenantId }}
            subscriptionId=${{ secrets.subscriptionId }}
            applicationId=${{ secrets.applicationId }}
            servicePrincipalPassword=${{ secrets.servicePrincipalPassword }}
            twitterApiKey=${{ secrets.twitterApiKey }}
            twitterApiSecretKey=${{ secrets.twitterApiSecretKey }}
            twitterAccessToken=${{ secrets.twitterAccessToken }}
            twitterAccessTokenSecret=${{ secrets.twitterAccessTokenSecret }}  

      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            ZIPPATH=$GITHUB_WORKSPACE/${{ env.OUTPUT_PATH }}/function.zip
            RESOURCEGROUP_FUNCTIONAPP=aksupdates-function-${{ env.ENVIRONMENT }}
            FUNCTIONAPP_NAME=aksupdates-${{ env.ENVIRONMENT }}
            az functionapp deployment source config-zip -g $RESOURCEGROUP_FUNCTIONAPP -n $FUNCTIONAPP_NAME --src $ZIPPATH

      # - uses: azure/arm-deploy@v1
      #   with:
      #     resourceGroupName: aksupdates-function-dev
      #     region: westeurope   
      #     # deploymentName: settings${{ github.run_number }}          
      #     template: ./infra/bicep/functionsettings.bicep
      #     parameters: 
      #       ./infra/bicep/main.parameters.${{ env.ENVIRONMENT }}.json
      #       tenantId=${{ secrets.tenantId }}
      #       subscriptionId=${{ secrets.subscriptionId }}
      #       applicationId=${{ secrets.applicationId }}
      #       servicePrincipalPassword=${{ secrets.servicePrincipalPassword }}
      #       twitterApiKey=${{ secrets.twitterApiKey }}
      #       twitterApiSecretKey=${{ secrets.twitterApiSecretKey }}
      #       twitterAccessToken=${{ secrets.twitterAccessToken }}
      #       twitterAccessTokenSecret=${{ secrets.twitterAccessTokenSecret }}            

      # - name: Provision resources        
      #   run: |            
      #     pushd ./infra/provisioning  
      #     chmod +x ./provisioning.sh
      #     ./provisioning.sh ${{ env.ENVIRONMENT }}
      #     popd

      # - name: 'Publish Azure Functions'
        # uses: Azure/functions-action@v1
        # id: fa
        # with:
          # app-name: ${{ env.FUNCION_APP_NAME }}       
          # package: ${{ github.workspace }}/${{ env.OUTPUT_PATH }}/function.zip

      # - name: Deploy & Configure environment
      #   env:          
      #     tenantId: ${{ secrets.tenantId }}
      #     subscriptionId: ${{ secrets.subscriptionId }}
      #     applicationId: ${{ secrets.applicationId }}
      #     servicePrincipalPassword: ${{ secrets.servicePrincipalPassword }}
      #     twitterApiKey: ${{ secrets.twitterApiKey }}
      #     twitterApiSecretKey: ${{ secrets.twitterApiSecretKey }}
      #     twitterAccessToken: ${{ secrets.twitterAccessToken }}
      #     twitterAccessTokenSecret: ${{ secrets.twitterAccessTokenSecret }}
      #     ZIPPATH: ${{ github.workspace }}/${{ env.OUTPUT_PATH }}/function.zip
      #   run: |            
      #     pushd ./infra/deploy  
      #     chmod +x ./deploy.sh
      #     ./deploy.sh ${{ env.ENVIRONMENT }}
      #     popd
         